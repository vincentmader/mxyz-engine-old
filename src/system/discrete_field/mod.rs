use crate::entity::field::DiscreteFieldCell;
use crate::interaction::Interaction;
use crate::system::physical_objects::PhysicalObjects;

#[derive(Clone)]
/// System: Force Field
pub struct DiscreteField {
    pub entities: Vec<Box<dyn DiscreteFieldCell>>,
}
impl DiscreteField {
    pub fn new() -> Self {
        let entities = vec![];
        DiscreteField { entities }
    }
    pub fn interact_with_discrete_field(
        &mut self,
        field: &DiscreteField,
        interaction: &Interaction,
    ) {
        match interaction {
            // e.g. tracer density field
            Interaction::Diffusion => {}
            // e.g. gravity waves
            Interaction::NewtonianGravity(integrator) => {}
            // e.g. light
            Interaction::Coulomb(integrator) => {}
            _ => {}
        }
    }
    pub fn interact_with_physical_objects(
        &mut self,
        field: &PhysicalObjects,
        interaction: &Interaction,
    ) {
        match interaction {
            // e.g. ball breaking window
            Interaction::Collision => {}
            // e.g. field around star
            Interaction::NewtonianGravity(integrator) => {}
            // e.g. electro-static field generated by charges
            Interaction::Coulomb(integrator) => {}
            _ => {}
        }
    }
}
