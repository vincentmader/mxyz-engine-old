use crate::config::EngineConfig;
use crate::entity::field::DiscreteFieldCell;
use crate::integrator::Integrator;
use crate::integrator::IntegratorVariant;
use crate::system::physical_objects::PhysicalObjects;

#[derive(Clone)]
/// System: Force Field
pub struct DiscreteField {
    pub entities: Vec<Box<dyn DiscreteFieldCell>>,
}
impl DiscreteField {
    pub fn new() -> Self {
        let entities = vec![];
        DiscreteField { entities }
    }
    /// Field-Field Interaction
    ///
    /// Examples
    /// - tracer density field
    /// - gravity waves
    /// - light
    pub fn interact_with_field(
        &mut self,
        _other: &DiscreteField,
        integrators: &Vec<&Integrator>,
        _config: &EngineConfig,
        _self_interaction: bool,
    ) {
        for integrator in integrators.iter() {
            match &integrator.variant {
                // InteractionVariant::Force(_) => todo!(),
                // InteractionVariant::Collision(_) => todo!(),
                _ => todo!(),
            }
        }
    }
    /// Field-Object Interaction
    ///
    /// Examples
    /// - electro-static field generated by charges
    /// - gravitational field around star
    /// - ball breaking window
    pub fn interact_with_objects(
        &mut self,
        _other: &PhysicalObjects,
        integrators: &Vec<&Integrator>,
        _config: &EngineConfig,
        _self_interaction: bool,
    ) {
        for integrator in integrators.iter() {
            match integrator.variant {
                // InteractionVariant::Force(_) => todo!(),
                // InteractionVariant::Collision(_) => todo!(),
                _ => todo!(),
            }
        }
    }
}
